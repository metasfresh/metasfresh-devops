name: pipeline
on: [push]
jobs:

  init:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: do-it
        run: |
          echo 'initializing...'

  java:
    needs: [init]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: do-it
        run: |
          echo 'compiling...'

  backend:
    needs: [init, java]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: do-it
        run: |
          echo 'building...'

  test-java:
    name: test (java)
    runs-on: ubuntu-latest
    needs: [init, java]
    steps:
      - uses: actions/checkout@v3
      - uses: testspace-com/setup-testspace@v1
        with:
          domain: metasfresh
      - name: run-tests
        run: |
          cd demo/junit
          docker buildx build -t tests .
      - name: publish results
        run: |
          mkdir results
          cd results
          docker run --rm -v "$(pwd)/junit:/reports" tests                                                # extracting test results from docker image
          find junit -type d -links 2 -exec testspace [{}]{}/*.xml \;                                     # upload all junit xml's to testspace 
          testspace "[junit/foo]junit/foo/junit.log{$(cat junit/foo/junit.exit-code):foo junit tests}"    # upload foo log with exit code 
          testspace "[junit/bar]junit/bar/junit.log{$(cat junit/bar/junit.exit-code):bar junit tests}"    # upload bar log with exit code
          testspace "[junit/baz]junit/baz/junit.log{$(cat junit/baz/junit.exit-code):baz junit tests}"    # upload baz log with exit code
      - name: assert success
        run: |
          cd results
          if [ $(cat junit/foo/junit.exit-code) != 0 ]; then cat junit/foo/junit.log && exit 1; fi        # print foo log and exit if foo failed
          if [ $(cat junit/bar/junit.exit-code) != 0 ]; then cat junit/bar/junit.log && exit 1; fi        # print bar log and exit if foo failed
          if [ $(cat junit/baz/junit.exit-code) != 0 ]; then cat junit/baz/junit.log && exit 1; fi        # print baz log and exit if foo failed
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: junit-logs
          path: results/junit/**/junit.log

  frontend:
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - uses: actions/checkout@v3
      - name: do-it
        run: |
          echo 'building...'

  test-frontend:
    name: test (frontend)
    runs-on: ubuntu-latest
    needs: [init, frontend]
    steps:
      - uses: actions/checkout@v3
      - uses: testspace-com/setup-testspace@v1
        with:
          domain: metasfresh
      - name: run-tests
        run: |
          cd demo/jest
          docker buildx build -t tests .
      - name: publish results
        run: |
          mkdir results
          cd results
          docker run --rm -v "$(pwd)/jest:/reports" tests                                                                         # extracting test results from docker image
          testspace "[jest/bozo]jest/bozo/jest.xml" "[jest/contozo]jest/contozo/jest.xml" "[jest/propozo]jest/propozo/jest.xml"   # upload all jest xml's to testspace 
          testspace "[jest/bozo]jest/bozo/jest.log{$(cat jest/bozo/jest.exit-code):bozo jest tests}"                              # upload bozo log with exit code
          testspace "[jest/contozo]jest/contozo/jest.log{$(cat jest/contozo/jest.exit-code):contozo jest tests}"                  # upload contozo log with exit code
          testspace "[jest/propozo]jest/propozo/jest.log{$(cat jest/propozo/jest.exit-code):propozo jest tests}"                  # upload propozo log with exit code
      - name: assert success
        run: |
          cd results
          if [ $(cat jest/bozo/jest.exit-code) != 0 ]; then cat jest/bozo/jest.log && exit 1; fi          # print bozo log and exit if bozo failed
          if [ $(cat jest/contozo/jest.exit-code) != 0 ]; then cat jest/contozo/jest.log && exit 1; fi    # print contozo log and exit if contozo failed
          if [ $(cat jest/propozo/jest.exit-code) != 0 ]; then cat jest/propozo/jest.log && exit 1; fi    # print propozo log and exit if propozo failed
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: jest-logs
          path: results/jest/**/jest.log

  test-integration:
    name: test (integration)
    runs-on: ubuntu-latest
    needs: [init, backend, frontend]
    steps:
      - uses: actions/checkout@v3
      - uses: testspace-com/setup-testspace@v1
        with:
          domain: metasfresh
      - name: run-tests
        timeout-minutes: 2
        run: |
          cd demo/cucumber
          mkdir -p results/cucumber
          docker-compose up --abort-on-container-exit --exit-code-from cucumber 2>&1 | tee cucumber.log && echo "${PIPESTATUS[0]}" > cucumber.exit-code
          docker-compose down
      - name: publish results
        run: |
          cd demo/cucumber/results
          find cucumber -type d -links 2 -exec testspace [{}]{}/*.xml \;                         # upload all cucumber xml's to testspace
          cd ..
          testspace "[cucumber]cucumber.log{$(cat cucumber.exit-code):cucumber tests}"           # upload cucumber log with exit code 
      - name: assert success
        run: |
          cd demo/cucumber
          if [ $(cat cucumber.exit-code) != 0 ]; then cat cucumber.log && exit 1; fi             # print cucumber log and exit if cucumber failed
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cucumber-logs
          path: demo/cucumber/cucumber.log
  redeploy:
    runs-on: ubuntu-latest
    needs: [init, backend, frontend]
    steps:
      - name: dispatching-redeploy
        run: |
          curl -X "POST" -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ github.token }}" -d '{"event_type":"redeploy","client_payload":{"tag":"${{ needs.init.outputs.tag-floating }}"}}' https://api.github.com/repos/metasfresh/mf15-kubernetes/dispatches
